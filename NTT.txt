
namespace NTT
{

    /* 
 * Number-theoretic transform library (Java)
 * 
 * Copyright (c) 2017 Project Nayuki
 * All rights reserved. Contact Nayuki for licensing.
 * https://www.nayuki.io/page/number-theoretic-transform-integer-dft
 */

//using java.math.BigInteger.One;
    using System.Numerics;
    //using java.math.BigInteger;
    //using java.util.ArrayList;
    //using java.util.Arrays;
    using System.Collections;
    //using java.util.Collections;
    //using java.util.List;


    public class BigNumberTheoreticTransform
    {

        /*---- High-level NTT functions ----*/

        // Returns the forward number-theoretic transform of the given vector with
        // respect to the given primitive nth root of unity under the given modulus.
        public static BigInteger[] transform(BigInteger[] invec, BigInteger root, BigInteger mod)
        {
            int n = invec.Length;
            BigInteger[] outvec = new BigInteger[n];
            for (int i = 0; i < n; i++)
            {
                BigInteger sum = (BigInteger)0;
                for (int j = 0; j < n; j++)
                {
                    BigInteger k = (BigInteger)((long)i * j % n);
                    sum = invec[j]*(root.modPow(k, mod)).add(sum).mod(mod);
                }
                outvec[i] = sum;
            }
            return outvec;
        }


        // Returns the inverse number-theoretic transform of the given vector with
        // respect to the given primitive nth root of unity under the given modulus.
        public static BigInteger[] inverseTransform(BigInteger[] invec, BigInteger root, BigInteger mod)
        {
            BigInteger[] outvec = transform(invec, root.modInverse(mod), mod);
            BigInteger scaler = (BigInteger)(invec.Length).modInverse(mod);
            for (int i = 0; i < outvec.Length; i++)
                outvec[i] = (outvec[i]*scaler)%(mod);
            return outvec;
        }


        // Computes the forward number-theoretic transform of the given vector in place,
        // with respect to the given primitive nth root of unity under the given modulus.
        // The Length of the vector must be a power of 2.
        public static void transformRadix2(BigInteger[] vector, BigInteger root, BigInteger mod)
        {
            int n = vector.Length;
            int levels = 31 - int.numberOfLeadingZeros(n);
            if (1 << levels != n)
                throw new Exception("Length is not a power of 2");

            BigInteger[] powTable = new BigInteger[n / 2];
            {
                BigInteger temp = BigInteger.One;
                for (int i = 0; i < powTable.Length; i++)
                {
                    powTable[i] = temp;
                    temp = (temp*root)%(mod);
                }
            }

            for (int i = 0; i < n; i++)
            {
                int j = int.reverse(i) >> (32 - levels);
                if (j > i)
                {
                    BigInteger temp = vector[i];
                    vector[i] = vector[j];
                    vector[j] = temp;
                }
            }

            for (int size = 2; size <= n; size *= 2)
            {
                int halfsize = size / 2;
                int tablestep = n / size;
                for (int i = 0; i < n; i += size)
                {
                    for (int j = i, k = 0; j < i + halfsize; j++, k += tablestep)
                    {
                        int l = j + halfsize;
                        BigInteger left = vector[j];
                        BigInteger right = vector[j + halfsize]*(powTable[k]);
                        vector[j] = (left+right)%(mod);
                        vector[l] = (left-right)%(mod);
                    }
                }
                if (size == n)
                    break;
            }
        }


        // Returns the circular convolution of the given vectors of integers.
        // All values must be non-negative. Internally, a sufficiently large modulus
        // is chosen so that the convolved result can be represented without overflow.
        public static BigInteger[] circularConvolve(BigInteger[] vec0, BigInteger[] vec1)
        {
            if (vec0.Length == 0 || vec0.Length != vec1.Length)
                throw new Exception();
            
            BigInteger maxval = Max(vec0);
            maxval = Max(vec1).max(maxval);

            BigInteger minmod = (maxval^2)*((BigInteger)(vec0.Length))+(BigInteger.One);
            BigInteger mod = findModulus(vec0.Length, minmod);
            BigInteger root = findPrimitiveRoot((BigInteger)(vec0.Length), mod-(BigInteger.One), mod);
            BigInteger[] temp0 = transform(vec0, root, mod);
            BigInteger[] temp1 = transform(vec1, root, mod);
            BigInteger[] temp2 = new BigInteger[temp0.Length];
            for (int i = 0; i < temp0.Length; i++)
                temp2[i] = (temp0[i]*temp1[i])%(mod);
            return inverseTransform(temp2, root, mod);
        }



        /*---- Mid-level number theory functions for NTT ----*/

        // Returns the smallest modulus mod such that mod = i * veclen + 1
        // for some integer i >= 1, mod > veclen, and mod is prime.
        // Although the loop might run for a long time and create arbitrarily large numbers,
        // Dirichlet's theorem guarantees that such a prime number must exist.
        public static BigInteger findModulus(int vecLen, BigInteger minimum)
        {
            if (vecLen < 1 || minimum.CompareTo(BigInteger.One) < 0)
                throw new Exception();
            BigInteger vl = (BigInteger)(vecLen);
            BigInteger start = minimum+(vl-TWO)/(vl);
            start = Math.Max(start, BigInteger.One);
            for (BigInteger n = (start*vl)+(BigInteger.One); ; n = n+(vl))
            {
                if (isPrime(n))
                    return n;
            }
        }


        // Returns an arbitrary generator of the multiplicative group of integers modulo mod.
        // totient must equal the Euler phi function of mod. If mod is prime, an answer must exist.
        public static BigInteger findGenerator(BigInteger totient, BigInteger mod)
        {
            if (totient.CompareTo(BigInteger.One) < 0 || totient.CompareTo(mod) >= 0)
                throw new Exception();
            for (BigInteger i = BigInteger.One; i.CompareTo(mod) < 0; i = (i+BigInteger.One))
            {
                if (isGenerator(i, totient, mod))
                    return i;
            }
            throw new ArithmeticException("No generator exists");
        }


        // Returns an arbitrary primitive degree-th root of unity modulo mod.
        // totient must be a multiple of degree. If mod is prime, an answer must exist.
        public static BigInteger findPrimitiveRoot(BigInteger degree, BigInteger totient, BigInteger mod)
        {
            if (degree.CompareTo(BigInteger.One) < 0 || degree.CompareTo(totient) > 0
                    || totient.CompareTo(mod) >= 0 || (totient%degree).signum() != 0)
                throw new Exception();
            BigInteger gen = findGenerator(totient, mod);
            return gen.modPow((totient/degree), mod);
        }


        // Tests whether val generates the multiplicative group of integers modulo mod. totient
        // must equal the Euler phi function of mod. In other words, the set of numbers
        // {val^0 % mod, val^1 % mod, ..., val^(totient-1) % mod} is equal to the set of all
        // numbers in the range [0, mod) that are coprime to mod. If mod is prime, then
        // totient = mod - 1, and powers of a generator produces all integers in the range [1, mod).
        public static bool isGenerator(BigInteger val, BigInteger totient, BigInteger mod)
        {
            if (val.signum() == -1 || val.CompareTo(mod) >= 0)
                throw new Exception();
            if (totient.CompareTo(BigInteger.One) < 0 || totient.CompareTo(mod) >= 0)
                throw new Exception();

            if (!val.modPow(totient, mod).equals(BigInteger.One))
                return false;
            foreach (BigInteger p in uniquePrimeFactors(totient))
            {
                if (val.modPow((totient/p), mod).equals(BigInteger.One))
                    return false;
            }
            return true;
        }


        // Tests whether val is a primitive degree-th root of unity modulo mod.
        // In other words, val^degree % mod = 1, and for each 1 <= k < degree, val^k % mod != 1.
        public static bool isPrimitiveRoot(BigInteger val, BigInteger degree, BigInteger mod)
        {
            if (val.signum() == -1 || val.CompareTo(mod) >= 0)
                throw new Exception();
            if (degree.CompareTo(ONE) < 0 || degree.CompareTo(mod) >= 0)
                throw new Exception();

            if (!val.modPow(degree, mod).equals(BigInteger.One))
                return false;
            foreach (BigInteger p in uniquePrimeFactors(degree))
            {
                if (val.modPow((degree/p), mod).equals(BigInteger.One))
                    return false;
            }
            return true;
        }



        /*---- Low-level common number theory functions ----*/

        // Returns a list of unique prime factors of the given integer in
        // ascending order. For example, unique_prime_factors(60) = [2, 3, 5].
        public static ArrayList<BigInteger> uniquePrimeFactors(BigInteger n)
        {
            if (n.CompareTo(BigInteger.One) < 0)
                throw new Exception();
            ArrayList<BigInteger> result = new ArrayList<>();
            for (BigInteger i = TWO, end = sqrt(n); i.CompareTo(end) <= 0; i = (i+BigInteger.One))
            {
                if ((n%i).signum() == 0)
                {
                    result.add(i);
                    do n = (n/i);
                    while ((n%i).signum() == 0);
                    end = sqrt(n);
                }
            }
            if (n.CompareTo(BigInteger.One) > 0)
                result.add(n);
            return result;
        }


        // Tests whether the given integer n >= 2 is a prime number.
        public static bool isPrime(BigInteger n)
        {
            if (n.CompareTo(BigInteger.One) <= 0)
                throw new Exception();
            if (!n.isProbablePrime(10))
                return false;
            if (!n.testBit(0))
                return (n == TWO);
            for (BigInteger i = (BigInteger)3, end = sqrt(n);
                    i.CompareTo(end) <= 0; i = (i+TWO))
            {
                if ((n % i).signum() == 0)
                    return false;
            }
            return true;
        }


        // Returns floor(sqrt(x)) for the given integer x >= 0.
        public static BigInteger sqrt(BigInteger x)
        {
            //if (x.signum() == -1)
            //    throw new Exception();
            BigInteger y = (BigInteger)0;
            for (int i = (x.GetByteCount() * 8 - 1) / 2; i >= 0; i--)
            {
                y = y.setBit(i);
                if ((y * y).CompareTo(x) > 0)
                    y = y.clearBit(i);
            }
            return y;
        }

        static BigInteger Max(BigInteger[] intArray)
        {
            BigInteger maxVal = intArray[0];
            for (int i = 1; i < intArray.Length; i++)
            {
                if (intArray[i] > maxVal)
                    maxVal = intArray[i];
            }
            return maxVal;
        }
        private static BigInteger TWO = (BigInteger)2;
	
}
}